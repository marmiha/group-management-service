consumes:
- application/json
definitions:
  Entity:
    properties:
      created_at:
        description: when it was created
        example: "2021-02-05T16:12:21.385747Z"
        format: date-time
        type: string
        x-go-name: CreatedAt
      updated_at:
        description: last time it was updated
        example: "2021-03-05T16:12:21.385747Z"
        format: date-time
        type: string
        x-go-name: UpdatedAt
    title: This is a common struct field amongst models that need to be persisted.
    type: object
    x-go-package: group-management-api/domain/model
  EntityID:
    format: int64
    type: integer
    x-go-package: group-management-api/domain/model
  ErrorResponse:
    properties:
      err:
        description: the description of this error
        example: ErrNotFound
        minimum: 1
        type: string
        x-go-name: ErrorString
    required:
    - err
    title: Generic error response struct.
    type: object
    x-go-package: group-management-api/adapter/restapi
  Group:
    properties:
      created_at:
        description: when it was created
        example: "2021-02-05T16:12:21.385747Z"
        format: date-time
        type: string
        x-go-name: CreatedAt
      id:
        $ref: '#/definitions/GroupID'
      name:
        description: group name
        example: admins
        type: string
        x-go-name: Name
      updated_at:
        description: last time it was updated
        example: "2021-03-05T16:12:21.385747Z"
        format: date-time
        type: string
        x-go-name: UpdatedAt
      users:
        description: members of the group
        example: []
        items:
          $ref: '#/definitions/User'
        type: array
        x-go-name: Members
    required:
    - id
    - name
    type: object
    x-go-package: group-management-api/domain/model
  GroupID:
    $ref: '#/definitions/EntityID'
  LoginResponse:
    properties:
      token:
        description: the jwt authentication token.
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJzdGFuZGFyZF9jbGFpbXMiOnsiZXhwIjoxNjEyNTc3NTQxLCJqdGkiOiIxIiwiaWF0IjoxNjEyNTQxNTQxLCJpc3MiOiJHcm91cE1hbmFnZW1lbnRBcHAifX0.skb_BHRkLz86btb9JG20Xu7p9zDUhbqBLoZHIdM2PV0
        type: string
        x-go-name: Token
    title: Response upon successful login request.
    type: object
    x-go-package: group-management-api/adapter/restapi
  RegisterResponse:
    properties:
      token:
        description: the jwt authentication token.
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJzdGFuZGFyZF9jbGFpbXMiOnsiZXhwIjoxNjEyNTc3NTQxLCJqdGkiOiIxIiwiaWF0IjoxNjEyNTQxNTQxLCJpc3MiOiJHcm91cE1hbmFnZW1lbnRBcHAifX0.skb_BHRkLz86btb9JG20Xu7p9zDUhbqBLoZHIdM2PV0
        type: string
        x-go-name: Token
      user:
        $ref: '#/definitions/User'
    title: Response upon successful registering request.
    type: object
    x-go-package: group-management-api/adapter/restapi
  User:
    properties:
      created_at:
        description: when it was created
        example: "2021-02-05T16:12:21.385747Z"
        format: date-time
        type: string
        x-go-name: CreatedAt
      email:
        description: email of the user
        example: dwight.schrute@gmail.com
        type: string
        x-go-name: Email
      group:
        $ref: '#/definitions/Group'
      id:
        $ref: '#/definitions/UserID'
      name:
        description: name of the user
        example: Dwight Schrute
        type: string
        x-go-name: Name
      updated_at:
        description: last time it was updated
        example: "2021-03-05T16:12:21.385747Z"
        format: date-time
        type: string
        x-go-name: UpdatedAt
    required:
    - id
    - email
    title: User model which the domain uses.
    type: object
    x-go-package: group-management-api/domain/model
  UserID:
    $ref: '#/definitions/EntityID'
host: localhost:3001
info:
  contact:
    email: miha.markez@gmail.com
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  title: Rest Api for Group Management.
  version: 0.0.1
paths:
  /groups:
    get:
      operationId: getGroups
      summary: Gets all the groups.
    post:
      operationId: createGroup
      summary: Creates a group with a name, it that is not already taken.
  /groups/{group_id}:
    delete:
      operationId: deleteGroup
      summary: Delete the group denoted by group_id.
    get:
      operationId: getGroup
      summary: Get a group which is denoted by group_id.
    patch:
      description: If the name is taken it will return a bad request error with explanation.
      operationId: modifyGroup
      summary: Change the group name.
  /groups/{group_id}/users:
    get:
      operationId: getMembersOfGroup
      summary: Gets all the members of a group denoted by user_id.
  /login:
    post:
      description: Returns a Bearer token, if the credentials are correct.
      operationId: loginUser
      responses:
        "200":
          description: LoginResponse
          schema:
            $ref: '#/definitions/LoginResponse'
        "400":
          description: ErrorResponse
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Log in the user with email and password.
  /users:
    get:
      operationId: getUsers
      summary: Gets all the users.
    post:
      description: The email has to be unique amongst the already registered members.
      operationId: registerUser
      responses:
        "200":
          description: RegisterResponse
          schema:
            $ref: '#/definitions/RegisterResponse'
        "400":
          description: ErrorResponse
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Register an user with email, name and password.
  /users/{user_id}:
    get:
      operationId: getUser
      summary: Get the user which is denoted by user_id.
  /users/current:
    delete:
      description: Supply the api with email and current password, so that that the
        user confirms his choice.
      operationId: unregisterCurrentUser
      summary: Unregister the user that is denoted from the Bearer token.
    get:
      description: Basically a profile fetcher.
      operationId: getSignedInUser
      summary: Get the currently logged in user from Bearer token.
    patch:
      description: The email has to be unique amongst the already registered users.
        At least one of these parameters have to be supplied.
      operationId: modifyCurrentUser
      summary: Modify user details, which are email and the name.
  /users/current/group:
    delete:
      description: In any instance the API returns a successful delete response.
      operationId: leaveGroup
      summary: Leave the current group.
    get:
      description: Returns bad request if the user has not joined a group yet.
      operationId: getCurrentUserGroup
      summary: Get the group from the currently logged in user.
    post:
      description: The group should exist and the user should not be in a group already.
        If these circumstances are not respected an error will be returned.
      operationId: joinGroup
      summary: Join a group denoted by group_id.
produces:
- application/json
schemes:
- http
securityDefinitions:
  bearer_auth:
    in: header
    name: JWT
    type: apiKey
swagger: "2.0"
